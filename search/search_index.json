{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cemiyet Docs Status : Working on REST API design. Glossary Symbol Meaning \u2753 it's not accepted yet \ud83d\udcb6 potential income model \ud83c\udd98 help needed","title":"Home"},{"location":"#welcome-to-cemiyet-docs","text":"Status : Working on REST API design.","title":"Welcome to Cemiyet Docs"},{"location":"#glossary","text":"Symbol Meaning \u2753 it's not accepted yet \ud83d\udcb6 potential income model \ud83c\udd98 help needed","title":"Glossary"},{"location":"back-end/","text":"Project Structure The main idea behind the project structure is the separation of concerns. Main principles to follow; Routers should be clean and version friendly. They call handlers from corresponding API version. Handlers are only responsible for specifying processing steps. They should not contain / depend any implementation details about database or models (if possible). Database operations should be abstract to the rest of the system except handlers. That way database changing costs could be minimal. Model related data structures should be separated. Versioning Project will follow rolling release concept. Response Codes Code Use Cases 200 OK Response to a successful GET, PUT, PATCH or DELETE requests. 201 Created Response to a successful POST request which results in a creation. 204 No Content Response to a successful request which doesn't have body. 304 Not Modified \u2753 Useful when HTTP caching is present. (Not yet planned.) 400 Bad Request Response to an unsuccessful request with bad data. 401 Unauthorized Response to an unsuccessful request with invalid authentication. 403 Forbidden Response to an unsuccessful request with valid authentication but with invalid authorization. 404 Not Found Response to an unsuccessful request made to unknown endpoint. 405 Method Not Allowed Response to an unsuccessful request which isn't allowed for authenticated user. 410 Gone Response to an unsuccessful request made to endpoint that no longer available. 415 Unsupported Media Type Response to an unsuccessful request with incorrect content type. 429 Too Many Requests \u2753 Useful when the request rejected due to rate limiting. (Not yet planned.) Endpoint Naming Strategy Endpoints will follow this main structure; /resource/:id/:subResource/:subResourceID For example; Resource POST GET PUT (replacing) PATCH (partial update) DELETE /users Creates new user. Returns user list. Method not allowed. (405) Method not allowed. (405) Method not allowed. (405) /books/1 Method not allowed. (405) Returns book info. Replaces book info. Updates book info. Removes book. Filtering For any filterable resource there will be filter query. For example; GET /users?IsPublic=true Will return only users with public profile. Sorting For any sortable resource there will be query for sorting. For example; GET /books?sortDescending=PrintDate Will return latest (30) printed books. Paging Default page size is 30 items. (This can be changed in the implementation.) Example; GET /books?sortDescending=PrintDate&page=2 Will return 2nd latest 30 books. Detailed endpoint list can be found in Endpoints section. Authentication When the user successfully logs in using their credentials, a JSON Web Token will be returned. Then authenticated requests should feature Authorization header using the Bearer schema; Authorization: Bearer <token> Authorization Main authorization model is role based using JWT claims until MVP. After MVP more complex authorization system should be a way to go. Database PostgreSQL 12 will be main choice until MVP. Endpoints","title":"Backend"},{"location":"back-end/#project-structure","text":"The main idea behind the project structure is the separation of concerns. Main principles to follow; Routers should be clean and version friendly. They call handlers from corresponding API version. Handlers are only responsible for specifying processing steps. They should not contain / depend any implementation details about database or models (if possible). Database operations should be abstract to the rest of the system except handlers. That way database changing costs could be minimal. Model related data structures should be separated.","title":"Project Structure"},{"location":"back-end/#versioning","text":"Project will follow rolling release concept.","title":"Versioning"},{"location":"back-end/#response-codes","text":"Code Use Cases 200 OK Response to a successful GET, PUT, PATCH or DELETE requests. 201 Created Response to a successful POST request which results in a creation. 204 No Content Response to a successful request which doesn't have body. 304 Not Modified \u2753 Useful when HTTP caching is present. (Not yet planned.) 400 Bad Request Response to an unsuccessful request with bad data. 401 Unauthorized Response to an unsuccessful request with invalid authentication. 403 Forbidden Response to an unsuccessful request with valid authentication but with invalid authorization. 404 Not Found Response to an unsuccessful request made to unknown endpoint. 405 Method Not Allowed Response to an unsuccessful request which isn't allowed for authenticated user. 410 Gone Response to an unsuccessful request made to endpoint that no longer available. 415 Unsupported Media Type Response to an unsuccessful request with incorrect content type. 429 Too Many Requests \u2753 Useful when the request rejected due to rate limiting. (Not yet planned.)","title":"Response Codes"},{"location":"back-end/#endpoint-naming-strategy","text":"Endpoints will follow this main structure; /resource/:id/:subResource/:subResourceID For example; Resource POST GET PUT (replacing) PATCH (partial update) DELETE /users Creates new user. Returns user list. Method not allowed. (405) Method not allowed. (405) Method not allowed. (405) /books/1 Method not allowed. (405) Returns book info. Replaces book info. Updates book info. Removes book. Filtering For any filterable resource there will be filter query. For example; GET /users?IsPublic=true Will return only users with public profile. Sorting For any sortable resource there will be query for sorting. For example; GET /books?sortDescending=PrintDate Will return latest (30) printed books. Paging Default page size is 30 items. (This can be changed in the implementation.) Example; GET /books?sortDescending=PrintDate&page=2 Will return 2nd latest 30 books. Detailed endpoint list can be found in Endpoints section.","title":"Endpoint Naming Strategy"},{"location":"back-end/#authentication","text":"When the user successfully logs in using their credentials, a JSON Web Token will be returned. Then authenticated requests should feature Authorization header using the Bearer schema; Authorization: Bearer <token>","title":"Authentication"},{"location":"back-end/#authorization","text":"Main authorization model is role based using JWT claims until MVP. After MVP more complex authorization system should be a way to go.","title":"Authorization"},{"location":"back-end/#database","text":"PostgreSQL 12 will be main choice until MVP.","title":"Database"},{"location":"back-end/#endpoints","text":"","title":"Endpoints"},{"location":"data-specification/","text":"Models 1st Generation: Books Genres Dimensions Authors Publishers Translators \u2753 Members Dealers \u2753 2nd Generation (Depends on 1st Generation): Series Admins Editors Tags \u2753 Cemiyets \u2753 Ratings \u2753 Languages \u2753 3rd Generation (Depends on 1st & 2nd Generations): Events \u2753 Entity-Relationship Diagram Status: Feature frozen until v0.6. New iteration will be held after the Ratings & Lists update. Books>CreatorType; 0 : Admin 1 : GenreEditor 2 : AuthorEditor 3 : PublisherEditor 4 : Publisher 5 : Author","title":"Data Specification"},{"location":"data-specification/#models","text":"1st Generation: Books Genres Dimensions Authors Publishers Translators \u2753 Members Dealers \u2753 2nd Generation (Depends on 1st Generation): Series Admins Editors Tags \u2753 Cemiyets \u2753 Ratings \u2753 Languages \u2753 3rd Generation (Depends on 1st & 2nd Generations): Events \u2753","title":"Models"},{"location":"data-specification/#entity-relationship-diagram","text":"Status: Feature frozen until v0.6. New iteration will be held after the Ratings & Lists update. Books>CreatorType; 0 : Admin 1 : GenreEditor 2 : AuthorEditor 3 : PublisherEditor 4 : Publisher 5 : Author","title":"Entity-Relationship Diagram"},{"location":"requirements/","text":"Actors Actor Assets \ud83d\udc7b Guest nothing. \ud83d\udc64 User book lists \ud83d\udc64 Author books , followers , events \u2753, publishers \u2753 \ud83d\udc65 Publisher \ud83d\udcb6 books , authors , followers , events \u2753 \ud83d\udc65 Dealer \ud83d\udcb6\u2753 book links \ud83d\udc65 Editor change records \u2753 \ud83d\udc65 Admin change records \u2753 Actor Authorities Actor Authorities \ud83d\udc65 Dealer \ud83d\udcb6\u2753 edit links to books \ud83d\udc65 Publisher \ud83d\udcb6 edit books, book series, authors, events \u2753 \ud83d\udc65 Editor edit particular books (by genre, by author) \ud83d\udc65 Admin edit all kind of data and manage editors Requirements Below are fundamental requirements per actor. Their purpose is to create a reference material for features. Status: Feature frozen until v0.6. New iteration will be held after the Ratings & Lists update. As a \ud83d\udc7b Guest : I want to... Notes Status Sign-up with my username, date of birth, email and password. TO DO Search a book by it's title. TO DO Search an author by name. TO DO Search a publisher by it's name. TO DO Search an user by it's username. TO DO See user profile. User profile must be public. TO DO See book detail page. TO DO See author detail page. TO DO See publisher detail page. TO DO As an \ud83d\udc64 User : Same as Guest , plus; I want to... Notes Status Sign-in with my username/email and password. TO DO Search a book by it's isbn/barcode. TO DO Filter search results. TO DO Create book lists. TO DO Edit my book lists. TO DO Add any unread book to read list. Book must be unread. TO DO Mark any book as read. TO DO Rate any read book out of 10. Book must be marked as read. TO DO See user's book lists on their profile page. User profile and list must be public. TO DO See publisher's book lists and book series on detail page. TO DO As an \ud83d\udc64 Author : Same as User , plus; I want to... Notes Status List my books. TO DO Update the information of my books. TO DO Add new book to my books. TO DO Send request to publisher to remove book. The book must have been added by the author or the publisher. Otherwise, author can send a request to the their editor. TO DO As a \ud83d\udc65 Publisher : Same as User , plus; I want to... Notes Status List books published by us. TO DO Update the information of our books. TO DO Add new book to our books. TO DO Delete book from our books. The book must have been added by the publisher. Otherwise, publisher should send a request to the their editor. TO DO As an \ud83d\udc65 Editor : Same as User , plus; I want to... Notes Status As an \ud83d\udc65 Admin : Same as User , plus; I want to... Notes Status As a \ud83d\udc65 Dealer : Same as User , plus; I want to... Notes Status","title":"Requirements"},{"location":"requirements/#actors","text":"Actor Assets \ud83d\udc7b Guest nothing. \ud83d\udc64 User book lists \ud83d\udc64 Author books , followers , events \u2753, publishers \u2753 \ud83d\udc65 Publisher \ud83d\udcb6 books , authors , followers , events \u2753 \ud83d\udc65 Dealer \ud83d\udcb6\u2753 book links \ud83d\udc65 Editor change records \u2753 \ud83d\udc65 Admin change records \u2753 Actor Authorities Actor Authorities \ud83d\udc65 Dealer \ud83d\udcb6\u2753 edit links to books \ud83d\udc65 Publisher \ud83d\udcb6 edit books, book series, authors, events \u2753 \ud83d\udc65 Editor edit particular books (by genre, by author) \ud83d\udc65 Admin edit all kind of data and manage editors","title":"Actors"},{"location":"requirements/#requirements","text":"Below are fundamental requirements per actor. Their purpose is to create a reference material for features. Status: Feature frozen until v0.6. New iteration will be held after the Ratings & Lists update. As a \ud83d\udc7b Guest : I want to... Notes Status Sign-up with my username, date of birth, email and password. TO DO Search a book by it's title. TO DO Search an author by name. TO DO Search a publisher by it's name. TO DO Search an user by it's username. TO DO See user profile. User profile must be public. TO DO See book detail page. TO DO See author detail page. TO DO See publisher detail page. TO DO As an \ud83d\udc64 User : Same as Guest , plus; I want to... Notes Status Sign-in with my username/email and password. TO DO Search a book by it's isbn/barcode. TO DO Filter search results. TO DO Create book lists. TO DO Edit my book lists. TO DO Add any unread book to read list. Book must be unread. TO DO Mark any book as read. TO DO Rate any read book out of 10. Book must be marked as read. TO DO See user's book lists on their profile page. User profile and list must be public. TO DO See publisher's book lists and book series on detail page. TO DO As an \ud83d\udc64 Author : Same as User , plus; I want to... Notes Status List my books. TO DO Update the information of my books. TO DO Add new book to my books. TO DO Send request to publisher to remove book. The book must have been added by the author or the publisher. Otherwise, author can send a request to the their editor. TO DO As a \ud83d\udc65 Publisher : Same as User , plus; I want to... Notes Status List books published by us. TO DO Update the information of our books. TO DO Add new book to our books. TO DO Delete book from our books. The book must have been added by the publisher. Otherwise, publisher should send a request to the their editor. TO DO As an \ud83d\udc65 Editor : Same as User , plus; I want to... Notes Status As an \ud83d\udc65 Admin : Same as User , plus; I want to... Notes Status As a \ud83d\udc65 Dealer : Same as User , plus; I want to... Notes Status","title":"Requirements"},{"location":"roadmap/","text":"Feature Roadmap Before starting development for every version, initial backlog should be present for itself and next version . v0.1 - Genres & Dimensions Update: CRUD operations for Genre & Dimension models. v0.2 - Authors & Publishers Update: CRUD operations for Author & Publisher models. v0.3 - Books Update: CRUD operations for Book & Serie models. Basic relations between books and related models. (authors, publishers etc.) v0.4 - Members Update: CRUD operations for Member model. Complete Authentication system. v0.5 - Ratings & Lists Update: CRUD operations for Rating & List related models. Basic rating system. Basic relations between ratings, members and books. CRUD operations for Book List models. Advanced relationships between books and users/authors/publishers via custom lists. v0.6 - Tags Update: \u2753 CRUD operations for User/Book Tag models. Advanced relationships between books and users via tags. v0.7 - Admins & Editors Update: CRUD operations for Admin & Editor models. Complete Authorization system. Complete CMS for Admins/Editors. v0.8 - Authors & Publishers Enhancement Update: Advanced relationships and interactions between authors, publishers and books, members. v0.9 - Dealers Update: CRUD operations for Dealer model. v1.0 - \u00d6t\u00fcken (MVP): Complete Authentication/Authorization system. Future-proof book centered model system. Complete management panels for Admins & Editors. Special actors and interaction microsystems that could lead to potential income models.","title":"Roadmap"},{"location":"roadmap/#feature-roadmap","text":"Before starting development for every version, initial backlog should be present for itself and next version . v0.1 - Genres & Dimensions Update: CRUD operations for Genre & Dimension models. v0.2 - Authors & Publishers Update: CRUD operations for Author & Publisher models. v0.3 - Books Update: CRUD operations for Book & Serie models. Basic relations between books and related models. (authors, publishers etc.) v0.4 - Members Update: CRUD operations for Member model. Complete Authentication system. v0.5 - Ratings & Lists Update: CRUD operations for Rating & List related models. Basic rating system. Basic relations between ratings, members and books. CRUD operations for Book List models. Advanced relationships between books and users/authors/publishers via custom lists. v0.6 - Tags Update: \u2753 CRUD operations for User/Book Tag models. Advanced relationships between books and users via tags. v0.7 - Admins & Editors Update: CRUD operations for Admin & Editor models. Complete Authorization system. Complete CMS for Admins/Editors. v0.8 - Authors & Publishers Enhancement Update: Advanced relationships and interactions between authors, publishers and books, members. v0.9 - Dealers Update: CRUD operations for Dealer model. v1.0 - \u00d6t\u00fcken (MVP): Complete Authentication/Authorization system. Future-proof book centered model system. Complete management panels for Admins & Editors. Special actors and interaction microsystems that could lead to potential income models.","title":"Feature Roadmap"}]}